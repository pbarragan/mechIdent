//Filter Models

//Version 4
double basicBayes::evaluteMVG(std::vector<double>& sampleVecVect, std::vector<double>& meanVecVect, std::vector<double>& covMatVect){
	//this funciton is problem specific
	//Convert
	Eigen::Map<Eigen::MatrixXd> sampleVec = convertVect(sampleVecVect);
	Eigen::Map<Eigen::MatrixXd> meanVec = convertVect(meanVecVect);
	Eigen::Map<Eigen::MatrixXd> covMat = convertCovMat(covMatVect);
	
	Eigen::MatrixXd error = (sampleVec - meanVec);
	Eigen::Matrix<double,1,1> secondHalf = (error.transpose()*covMat.inverse()*error);
	return (1.0/(pow(2.0*M_PI,meanVec.rows()/2.0)*pow(covMat.determinant(),0.5)))*exp(-0.5*secondHalf(0,0));
}

//Need to set the covariance matrices for the transition function (simulated action) and the observation function
void basicBayes::setCovMats(std::vector<double>& obs,std::vector<double>& trans){
	//this funciton is problem specific
	
	//double obsArray[] = {1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0};
	//double transArray[] = {1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0};
	//double obsArray[] = {0.005,0.0,0.0,0.005};
	//double transArray[] = {0.005,0.0,0.0,0.005};
	double obsArray[] = {0.0000001,0.0,0.0,0.0000001};
	double transArray[] = {0.0000001,0.0,0.0,0.0000001};
	obs.assign(obsArray, obsArray + sizeof(obsArray)/sizeof(double));
	trans.assign(transArray, transArray + sizeof(transArray)/sizeof(double));
}

double basicBayes::logProbState(std::vector<double> sampleState, std::vector<double> meanState){
	//this funciton is problem specific
	
	//sampleState is the sample vector. meanState is the mean vector. This just drops a gaussian at the meanState with a constant covariance from the class.	
	if (meanState[0]==sampleState[0]){
	  //translate to the observation space which should be a vector directly comparable with another
	  std::vector<double> sampleStateInO = translator::translateStateToO(sampleState);
	  std::vector<double> meanStateInO = translator::translateStateToO(meanState);
	  return logUtils::evaluteLogMVG(sampleStateInO,meanStateInO,transCovMat);
	}
	else {
	  //return 0.0;
	  return -std::numeric_limits<double>::infinity();
	}

}

double basicBayes::logProbObs(std::vector<double> obs, std::vector<double> state){
	//this funciton is problem specific

	//obs is the sample vector. state is the mean vector. This just drops a gaussian at the state with a constant covariance from the class.
	//return evaluteMVG(obs,state,obsCovMat);
	
	//WOM means without model.
	std::vector<double> stateWOM;
	
	//different things for different states	
	if (state[0] == 0.0 || state[0] == 1.0){
	  stateWOM.assign(state.begin()+1,state.end());
	}
	else if (state[0] == 2.0){
	  double beamLen = 0.44-0.1;
	  double beamAngle = state[1]; //angle of the beam
	  stateWOM.push_back(0.44+(beamLen+0.1f)*cos(beamAngle));
	  stateWOM.push_back((beamLen+0.1f)*sin(beamAngle));
	}
	else if (state[0] == 3.0){
	  double beamSlidePosition = state[1]; //slide position parameter
	  stateWOM.push_back(beamSlidePosition);
	  stateWOM.push_back(0.0);
	}
	
	//std::cout << "I'm in probState" << std::endl;

	return logUtils::evaluteLogMVG(obs,stateWOM,obsCovMat);
}
